#! /usr/bin/env python
#
# Support module generated by PAGE version 4.4.4
# In conjunction with Tcl version 8.6
#    Aug 09, 2015 11:16:18 PM
# Configure communication

from __future__ import unicode_literals, print_function, division
import sys
import glob
import listports
import json
import os.path
import inspect
#import serial.tools.list_ports

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

filename = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe()))) + '/serialconfig.txt'
localserialconfig =  {"baudrate":"115200", "comport": "COM1"}
cbaudrates = ('9600', '19200' , '38400', '57600','115200', '230400', '250000')  # possible baudrates

#get filename of serial port configuration
def GetFileName():
    return filename

# save serial port config
def  Saveconfig():
    global localserialconfig
    f = open(filename,'w')
    json.dump(localserialconfig, f, indent=2)
    f.close()
    print('Stored : ', localserialconfig)

# read serial prort config
def  Readconfig():
    global localserialconfig
    print(' Open config: ', filename , ' ' , localserialconfig)
    if os.path.isfile(filename):          # check if config file exists and load config
        print ('File found')
        f = open(filename, 'r')
        #print(json.load(f))
        llconfig = json.load(f)
#        print('llconfig: ', llconfig)
        localserialconfig = llconfig
        f.close()
        print('Loaded : ', localserialconfig)
    else:
        localserialconfig =  {"baudrate":cbaudrates[0], "comport": listports.serial_ports()[0]}
        print('Not found, defaults set ', localserialconfig)
 #   localserialconfig = llocalserialconfig
    return localserialconfig

def connection_info():
    global localserialconfig
    return localserialconfig

def  Close():
    Saveconfig()
    sys.stdout.flush()
    destroy_window()

def  cancel():
    print('ComportConfig_support.cancel')
    sys.stdout.flush()
    destroy_window()

def  init(top, gui, arg=None):
    global w, top_level, root
    w = gui
    top_level = top
    root = top


def  destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None




